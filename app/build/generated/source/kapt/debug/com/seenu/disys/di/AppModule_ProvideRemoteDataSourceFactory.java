// Generated by Dagger (https://dagger.dev).
package com.seenu.disys.di;

import com.seenu.disys.data.remote.ApiService;
import com.seenu.disys.data.remote.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRemoteDataSourceFactory implements Factory<RemoteDataSource> {
  private final Provider<ApiService> apiServiceProvider;

  public AppModule_ProvideRemoteDataSourceFactory(Provider<ApiService> apiServiceProvider) {
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public RemoteDataSource get() {
    return provideRemoteDataSource(apiServiceProvider.get());
  }

  public static AppModule_ProvideRemoteDataSourceFactory create(
      Provider<ApiService> apiServiceProvider) {
    return new AppModule_ProvideRemoteDataSourceFactory(apiServiceProvider);
  }

  public static RemoteDataSource provideRemoteDataSource(ApiService apiService) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRemoteDataSource(apiService));
  }
}
