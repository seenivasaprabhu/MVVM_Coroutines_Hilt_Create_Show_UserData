// Generated by Dagger (https://dagger.dev).
package com.seenu.disys.di;

import com.seenu.disys.data.local.DatabaseDao;
import com.seenu.disys.data.remote.RemoteDataSource;
import com.seenu.disys.data.repository.Repository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRepositoryFactory implements Factory<Repository> {
  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  private final Provider<DatabaseDao> localDataSourceProvider;

  public AppModule_ProvideRepositoryFactory(Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<DatabaseDao> localDataSourceProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.localDataSourceProvider = localDataSourceProvider;
  }

  @Override
  public Repository get() {
    return provideRepository(remoteDataSourceProvider.get(), localDataSourceProvider.get());
  }

  public static AppModule_ProvideRepositoryFactory create(
      Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<DatabaseDao> localDataSourceProvider) {
    return new AppModule_ProvideRepositoryFactory(remoteDataSourceProvider, localDataSourceProvider);
  }

  public static Repository provideRepository(RemoteDataSource remoteDataSource,
      DatabaseDao localDataSource) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRepository(remoteDataSource, localDataSource));
  }
}
